/*
 * Copyright and related rights waived via CC0
 *
 * You should have received a copy of the CC0 legalcode along with this
 * work. If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.
 */

plugins {
    id "org.graalvm.internal.tck"
}

String libraryVersion = tck.testedLibraryVersion.get()

dependencies {
    testImplementation "org.liquibase:liquibase-core:$libraryVersion"
    testImplementation 'com.h2database:h2:2.1.210'
    testImplementation 'org.assertj:assertj-core:3.22.0'
}

// TODO: make this work for this test, then add support for resources, then add to major test so we hook into all tests 
task processAgentOutput {
    mustRunAfter tasks.named("generateTestResourcesConfigFile")
    
    doLast {
        println "=== Starting Agent Output Processing ==="
        
        def agentOutputDir = file("${buildDir}/resources/test/META-INF/native-image/test")
        println "Looking for agent output in: ${agentOutputDir.absolutePath}"
        
        def reflectConfig = file("${agentOutputDir}/reflect-config.json")
        if (reflectConfig.exists()) {
            println "Found reflect-config.json, size: ${reflectConfig.length()} bytes"
            println "Content: ${reflectConfig.text}"
            
            // Execute proguard mapper Python script
            println "Generating ProGuard config..."
            def proguardMapperScript = file("${rootProject.projectDir}/../../../../../proguard_mapper/proguard_mapper.py")
            def proguardConfigOutput = file("${buildDir}/proguard-config.pro")
            
            def result = exec {
                executable "python3"
                args proguardMapperScript.absolutePath, 
                     reflectConfig.absolutePath,
                     proguardConfigOutput.absolutePath
                ignoreExitValue = false
            }
            
            if (result.exitValue == 0) {
                println "ProGuard config generated at: ${proguardConfigOutput.absolutePath}"
                println "ProGuard config content:"
                println proguardConfigOutput.text
                
                // TODO: Run ProGuard with the generated config
                println "Executing ProGuard..."
            } else {
                println "ERROR: ProGuard mapper script failed!"
            }
        } else {
            println "WARNING: reflect-config.json not found!"
            println "Files in agent output dir: ${agentOutputDir.list()}"
        }
        
        println "=== Completed Agent Output Processing ==="
    }
}

graalvmNative {
    agent {
        defaultMode = "conditional"
        modes {
            conditional {
                userCodeFilterPath = "user-code-filter.json"
            }
        }
        metadataCopy {
            mergeWithExisting = true
            inputTaskNames.add("test")
            outputDirectories.add("src/test/resources/META-INF/native-image/org.liquibase/liquibase-core")
        }
    }
    binaries {
        test {
            buildArgs.add('--enable-url-protocols=http')
        }
    }
}

tasks.named("nativeTestCompile") {
    dependsOn processAgentOutput
}